" *********************************************
" NERD插件属性
" *********************************************
" au vimenter * NERDTree   " 开启vim的时候默认开启NERDTree
map <F2> :NERDTreeToggle<CR>  " F2开启和关闭树
let NERDTreeChDirMode=1
let NERDTreeShowBookmarks=1  "显示书签"
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置忽略文件类型
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '__pycache__'] 
let NERDTreeWinSize=35   "窗口大小"
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" vim open directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerdtree-git-plugin git信息显示
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


" *********************************************
" intentLine插件属性: 缩进指示线
" *********************************************
let g:indentLine_char='┆'
let g:indentLine_enabled = 1
" *********************************************
" autopep8设置插件属性: 在Normal模式输入:Autopep8或按F8就可以自动依照pep8的标准自动格式化代码
" *********************************************
let g:autopep8_disable_show_diff=1
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
" *********************************************
" nerdcommenter插件属性: 注释与反注释
" 备注：多行注释只需要在normal模式下按v并移动光标选择需要注释的行，再按F4就可以为所有选中的行添加注释。
" *********************************************
map <F4> <leader>ci <CR>
" *********************************************
" jidi-vim设置插件属性: <Ctrl-n>(同时按下Ctrl和n键) 组合键用于触发jedi-vim的自动补齐功能
" 备注:
" Goto assignments: <leader>g (typical goto function);
" 跳转到定义：<leader>d
" 显示Python文档(Pydoc)： K
" 重命名：<leader>r
" 展示某个变量的使用方法：<leader>n (shows all the usages of a name)
" 打开某个模块：:Pyimport os (打开 os 模块)
" 注：<leader> 表示Vim的leader键，默认为 \。
" *********************************************
let g:jedi#completions_command = "<C-N>" 

" tabu
" 启动时自动focus
" let g:tagbar_auto_faocus =1
" 启动指定文件时自动开启tagbar
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1
let g:pymode_python="python3"
" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" syntastic
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint(详细)快
" let g:syntastic_python_checkers=['flake8', 'pep8'] " 使用pyflakes,速度比pylint(详细)快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>

"neocomplache config
let g:neocomplcache_force_overwrite_completefunc = 1
" let g:NeoComplCache_DisableAutoComplete = 1 " 不自动弹出补全列表
" markdown
let g:vim_markdown_folding_disabled = 1  " 不折叠显示，默认是折叠显示，看个人习惯
let g:vim_markdown_override_foldtext = 0  
let g:vim_markdown_folding_level = 6    " 可折叠的级数，对应md的标题级别
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_emphasis_multiline = 0
" 隐藏2
" set conceallevel=2
" 禁用隐藏
let g:vim_markdown_conceal=0
let g:vim_markdown_frontmatter=1 "" 设置支持yaml语法

" scala config
let g:scala_scaladoc_indent = 1

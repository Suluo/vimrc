" Plugins: {
"     Nerdtree-git-plugin {
        let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ "Unknown"   : "?"
            \ }
"     }
"     Neomake: {
        call neomake#configure#automake('nw', 500)
"     }
"     Deoplete-tabnine: {
"        call deoplete#custom#var('tabnine', {
"            \ 'line_limit': 500,
"            \ 'max_num_results': 20,
"            \ })
"     }
"     Autopep8: {
        " autopep8设置插件属性: 在Normal模式输入:Autopep8或按F8就可以自动依照pep8的标准自动格式化代码
        let g:autopep8_disable_show_diff=1
        autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
"     }
    " Python-mode: {
        " Activate rope
        " Keys:
        " K             Show python docs
        " <Ctrl-Space>  Rope autocomplete
        " <Ctrl-c>g     Rope goto definition
        " <Ctrl-c>d     Rope show documentation
        " <Ctrl-c>f     Rope find occurrences
        " <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
        " [[            Jump on previous class or function (normal, visual, operator modes)
        " ]]            Jump on next class or function (normal, visual, operator modes)
        " [M            Jump on previous class or method (normal, visual, operator modes)
        " ]M            Jump on next class or method (normal, visual, operator modes)
        " 开启警告
        let g:pymode_warnings = 0
        "启用重构
        let g:pymode_rope = 1
        "保存文件时自动删除无用空格
        let g:pymode_trim_whitespaces = 1
        let g:pymode_options = 1
        " let g:pymode_python = 'python3'
        "使用PEP8风格的缩进
        let g:pymode_indent = 1
        "启用python-mode内置的python文档，使用K进行查找
        let g:pymode_doc = 1
        let g:pymode_doc_bind = 'K'
        "设置QuickFix窗口的最大，最小高度
        let g:pymode_quickfix_minheight = 3
        let g:pymode_quickfix_maxheight = 10
        " Linting
        let g:pymode_lint = 1
        let g:pymode_lint_ignore = "F401,W0401,E501,W293"
        " Auto check on save
        let g:pymode_lint_write = 1
        " Support virtualenv
        let g:pymode_virtualenv = 1
        " Enable breakpoints plugin
        let g:pymode_breakpoint = 1
        let g:pymode_breakpoint_bind = '<leader>b'
        "<C-c>g跳转到定义处，同时新建竖直窗口打开
        let g:pymode_rope_goto_definition_bind = '<C-c>g'
        let g:pymode_rope_goto_definition_cmd = 'vnew'
        " syntax highlighting
        let g:pymode_syntax = 1
        let g:pymode_syntax_all = 1
        "高亮缩进错误
        let g:pymode_syntax_indent_errors = g:pymode_syntax_all
        "高亮空格错误
        let g:pymode_syntax_space_errors = g:pymode_syntax_all
    " }
    " Markdown: {
        let g:vim_markdown_folding_disabled = 1  " 不折叠显示，默认是折叠显示，看个人习惯
        let g:vim_markdown_override_foldtext = 0
        let g:vim_markdown_folding_level = 6    " 可折叠的级数，对应md的标题级别
        let g:vim_markdown_no_default_key_mappings = 1
        let g:vim_markdown_emphasis_multiline = 0
        " 隐藏2
        " set conceallevel=2
        " 禁用隐藏
        let g:vim_markdown_conceal=0
        let g:vim_markdown_frontmatter=1 "" 设置支持yaml语法
    " }
    " Ale: {
        "ale
        "始终开启标志列
        let g:ale_sign_column_always = 1
        let g:ale_set_highlights = 0
        "自定义error和warning图标
        let g:ale_sign_error = '✗'
        let g:ale_sign_warning = '⚡'
        "在vim自带的状态栏中整合ale
        let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
        "显示Linter名称,出错或警告等相关信息
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
        nmap sp <Plug>(ale_previous_wrap)
        nmap sn <Plug>(ale_next_wrap)
        "<Leader>s触发/关闭语法检查
        nmap <Leader>s :ALEToggle<CR>
        "<Leader>d查看错误或警告的详细信息
        nmap <Leader>d :ALEDetail<CR>
    " }
    " Jidi-vim: {
        " *********************************************
        " jidi-vim设置插件属性: <Ctrl-n>(同时按下Ctrl和n键) 组合键用于触发jedi-vim的自动补齐功能
        " 备注:
        " Goto assignments: <leader>g (typical goto function);
        " 跳转到定义：<leader>d
        " 显示Python文档(Pydoc)： K
        " 重命名：<leader>r
        " 展示某个变量的使用方法：<leader>n (shows all the usages of a name)
        " 打开某个模块：:Pyimport os (打开 os 模块)
        " 注：<leader> 表示Vim的leader键，默认为 \。
        " *********************************************
        let g:jedi#completions_command = "<C-N>"
    " }
    " Scala: {
        let g:scala_scaladoc_indent = 1
    " }
    " Copyright: {
        let g:file_copyright_name = "suluo"
        let g:file_copyright_email = "sampon.suluo@gmail.com"
    " }
" }

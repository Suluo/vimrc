" Plugins: {
"     Syntastic {
        let g:syntastic_enable_signs = 1
        "打开文件时自动进行检查
        let g:syntastic_check_on_open=1
        let g:syntastic_enable_highlighting=1
        ""进行实时检查，如果觉得卡顿，将下面的选项置为1
        let g:syntastic_check_on_wq = 0
        " 使用flake8,速度比pylint(详细)快
        let g:syntastic_python_checkers=['flake8', 'pep8', 'pylint']
        let g:syntastic_python_pylint_args="-d C0103,C0111,R0201"
        let g:syntastic_python_flake8_args='--ignore=F821,E302,E501'
        " " 修改高亮的背景色, 适应主题
        highlight SyntasticErrorSign guifg=white guibg=black
        " " to see error location list
        " "总是打开Location List（相当于QuickFix）窗口，如果你发现syntastic因为与其他插件冲突而经常崩溃，将下面选项置0
        " let g:syntastic_always_populate_loc_list = 1
        " "自动打开Locaton List，默认值为2，表示发现错误时不自动打开，当修正以后没有再发现错误时自动关闭，置1表示自动打开自动关闭，0表示关闭自动打开和自动关闭，3表示自动打开，但不自动关闭
        let g:syntastic_auto_loc_list = 1
        "自动跳转到发现的第一个错误或警告处
        let g:syntastic_auto_jump = 1
        let g:syntastic_loc_list_height = 5
        function! ToggleErrors()
            let old_last_winnr = winnr('$')
            lclose
            if old_last_winnr == winnr('$')
             " Nothing was closed, open syntastic error location panel
                Errors
            endif
        endfunction
        nnoremap <Leader>s :call ToggleErrors()<cr>
        nnoremap <Leader>sn :lnext<cr>
        nnoremap <Leader>sp :lprevious<cr>"
"     }
"     Nerdtree-git-plugin {
        let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ "Unknown"   : "?"
            \ }
"     }
"     Deoplete-tabnine: {
"        call deoplete#custom#var('tabnine', {
"            \ 'line_limit': 500,
"            \ 'max_num_results': 20,
"            \ })
"     }
"     Autopep8: {
        " autopep8设置插件属性: 在Normal模式输入:Autopep8或按F8就可以自动依照pep8的标准自动格式化代码
        let g:autopep8_disable_show_diff=1
        autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
"     }
    " Markdown: {
        let g:vim_markdown_folding_disabled = 1  " 不折叠显示，默认是折叠显示，看个人习惯
        let g:vim_markdown_override_foldtext = 0
        let g:vim_markdown_folding_level = 6    " 可折叠的级数，对应md的标题级别
        let g:vim_markdown_no_default_key_mappings = 1
        let g:vim_markdown_emphasis_multiline = 0
        " 隐藏2
        " set conceallevel=2
        " 禁用隐藏
        let g:vim_markdown_conceal=0
        let g:vim_markdown_frontmatter=1 " 设置支持yaml语法
    " }
    " Ale: {
        "ale
        "始终开启标志列
        let g:ale_sign_column_always = 1
        let g:ale_set_highlights = 0
        "自定义error和warning图标
        let g:ale_sign_error = '✗'
        let g:ale_sign_warning = '⚡'
        " show errors or warnings in my statusline
        " let g:airline#extensions#ale#enabled = 1
        " use quickfix list instead of the loclist
        " let g:ale_set_loclist = 0
        let g:ale_set_quickfix = 1
        "在vim自带的状态栏中整合ale
        let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
        "显示Linter名称,出错或警告等相关信息
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
        nmap sp <Plug>(ale_previous_wrap)
        nmap sn <Plug>(ale_next_wrap)
        "<Leader>s触发/关闭语法检查
        nmap <Leader>s :ALEToggle<CR>
        "<Leader>d查看错误或警告的详细信息
        nmap <Leader>d :ALEDetail<CR>
        "使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
        "let g:ale_linters = {
        "\   'c++': ['clang'],
        "\   'c': ['clang'],
        "\   'python': ['pylint', 'flake8', 'pep8'],
        "\}
        "}
    " }
    " Jidi-vim: {
        " *********************************************
        " jidi-vim设置插件属性: <Ctrl-n>(同时按下Ctrl和n键) 组合键用于触发jedi-vim的自动补齐功能
        " 备注:
        " Goto assignments: <leader>g (typical goto function);
        " 跳转到定义：<leader>d
        " 显示Python文档(Pydoc)： K
        " 重命名：<leader>r
        " 展示某个变量的使用方法：<leader>n (shows all the usages of a name)
        " 打开某个模块：:Pyimport os (打开 os 模块)
        " 注：<leader> 表示Vim的leader键，默认为 \。
        " *********************************************
        let g:jedi#completions_command = "<C-N>"
    " }
    " Scala: {
        let g:scala_scaladoc_indent = 1
    " }
    " Copyright: {
        let g:file_copyright_name = "suluo"
        let g:file_copyright_email = "sampon.suluo@gmail.com"
    " }
" }

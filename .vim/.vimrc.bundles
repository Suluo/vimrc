" start vim bundle
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
" Fugitive: Git 集成，强烈推荐！
Bundle 'tpope/vim-fugitive'
" git diff
Bundle 'airblade/vim-gitgutter'
" " Solarized: 非常流行的配色。
Bundle 'altercation/vim-colors-solarized'
" " Airline: 小巧美观的状态栏。
Bundle 'bling/vim-airline'
" 目录树
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
" 目录树git显示
Bundle 'Xuyuanp/nerdtree-git-plugin'
" mark-down
" Tabular: 自动对齐。
Bundle 'godlygeek/tabular'
" tabular 在前
Bundle 'plasticboy/vim-markdown'
" cp ~/.vim/bundle/vim-markdown/syntax/markdown.vim ~/.vim/syntax/
" cp ~/.vim/bundle/vim-markdown/ftdetect/markdown.vim ~/.vim/ftdetect/
" " all
" 符号补全
Bundle 'jiangmiao/auto-pairs' 
" 在两端加上、修改、删除匹配的符号如（）
Bundle 'tpope/vim-surround' 
Bundle 'msanders/snipmate.vim'
" 快速跳转函数 需要ctags
" Bundle 'majutsushi/tagbar'
" 超级 搜索
Bundle 'kien/ctrlp.vim'
" 缩进指示
Bundle 'Yggdroot/indentLine'
Bundle 'tell-k/vim-autopep8'
" 快速注释
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-commentary'
" 语法检查
Bundle 'scrooloose/syntastic'
Bundle 'nvie/vim-flake8'
Bundle 'hynek/vim-python-pep8-indent'
" 补全提示
Bundle 'Python-mode-klen'
" Bundle 'Pydiction' 
Bundle 'davidhalter/jedi-vim'
" neocomplete
" Bundle 'Shougo/neoinclude.vim'
" Bundle 'Shougo/neco-vim'
" Bundle 'Shougo/neco-syntax'
" Bundle 'Shougo/neocomplete.vim'
" YCM
" 需要编译
" cd ~/.vim/bundle/YouCompleteMe
" git submodule update --init --recursive
" ./install.py --clang-completer
" Bundle 'Valloric/YouCompleteMe'
" " Web
"神级插件，ZenCoding(原名)可以让你以一种神奇而无比爽快的感觉写HTML、CSS
Bundle 'mattn/emmet-vim'
" scala
" shell 执行如下命令
" mkdir -p ~/.vim/{ftdetect,indent,syntax}
" for d in ftdetect indent syntax
"    do wget --no-check-certificate -O ~/.vim/$d/scala.vim \
"      https://raw.githubusercontent.com/derekwyatt/vim-scala/master/$d/scala.vim;
"    done
Bundle 'derekwyatt/vim-scala'

Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
Bundle 'mileszs/ack.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'tpope/vim-sensible'
" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
" git repos on your local machine (ie. when working on your own plugin)
" ...
Bundle 'spf13/spf13-vim'

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

" *********************************************
" NERD插件属性
" *********************************************
" au vimenter * NERDTree   " 开启vim的时候默认开启NERDTree
map <F2> :NERDTreeToggle<CR>  " F2开启和关闭树
let NERDTreeChDirMode=1
let NERDTreeShowBookmarks=1  "显示书签"
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置忽略文件类型
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '__pycache__'] 
let NERDTreeWinSize=35   "窗口大小"
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" vim open directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerdtree-git-plugin git信息显示
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

"autopep8设置"
let g:autopep8_disable_show_diff=1

" tabu
" 启动时自动focus
" let g:tagbar_auto_faocus =1
" 启动指定文件时自动开启tagbar
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

" syntastic
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint(详细)快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>

"neocomplache config
let g:neocomplcache_force_overwrite_completefunc = 1
" let g:NeoComplCache_DisableAutoComplete = 1 " 不自动弹出补全列表
" markdown
let g:vim_markdown_folding_disabled = 1  " 不折叠显示，默认是折叠显示，看个人习惯
let g:vim_markdown_override_foldtext = 0  
let g:vim_markdown_folding_level = 6    " 可折叠的级数，对应md的标题级别
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_emphasis_multiline = 0
" 隐藏2
" set conceallevel=2
" 禁用隐藏
let g:vim_markdown_conceal=0
let g:vim_markdown_frontmatter=1 "" 设置支持yaml语法

" scala config
let g:scala_scaladoc_indent = 1

"------------------ YouCompleteMe -------------------
" Linux vim && NeoVim Using YouCompleteMe
"默认配置文件路径"
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
"打开vim时不再询问是否加载ycm_extra_conf.py配置"
let g:ycm_confirm_extra_conf=0
"python解释器路径"
let g:ycm_path_to_python_interpreter='/usr/local/bin/python'
"是否开启语义补全"
let g:ycm_seed_identifiers_with_syntax=1
"是否在注释中也开启补全"
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_collect_identifiers_from_tags_files = 1
"开始补全的字符数"
let g:ycm_min_num_of_chars_for_completion=2
"补全后自动关机预览窗口"
let g:ycm_autoclose_preview_window_after_completion=1
" 禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0
"字符串中也开启补全"
let g:ycm_complete_in_strings = 1
"离开插入模式后自动关闭预览窗口"
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

let g:deoplete#enable_at_startup=1
let g:ycm_auto_trigger = 0
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_max_diagnostics_to_display=16
let g:ycm_disable_for_files_larger_than_kb = 50000
let g:ycm_key_list_select_completion = ['<C-n>', '<C-j>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<C-k>']
let g:ycm_filetype_blacklist = {
			\ 'tagbar' : 1,
			\ 'qf' : 1,
			\ 'notes' : 1,
			\ 'markdown' : 1,
			\ 'unite' : 1,
			\ 'text' : 1,
			\ 'vimwiki' : 1,
			\ 'pandoc' : 1,
			\ 'infolog' : 1,
			\ 'mail' : 1,
			\ 'mundo': 1,
			\ 'fzf': 1,
			\ 'ctrlp' : 1
			\}

let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
" Go to Definition variable
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

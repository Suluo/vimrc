" Plugins {
    " NerdTree {
        " F2开启和关闭树
        map <F2> :NERDTreeToggle<CR>
        " 开启vim的时候默认开启NERDTree
        autocmd VimEnter * NERDTree
        wincmd w
        autocmd VimEnter * wincmd w
        let NERDTreeChDirMode=1
        " 显示行号
        let NERDTreeShowLineNumbers=1
        let NERDTreeAutoCenter=1
        " 设置忽略文件类型
        let NERDTreeWinSize=30   "窗口大小"
        " vim open directory
        " 在终端启动vim时，共享NERDTree
        let g:nerdtree_tabs_open_on_console_startup=1
        ""当NERDTree为剩下的唯一窗口时自动关闭
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        " 打开vim时如果没有文件自动打开NERDTree
        autocmd vimenter * if !argc()|NERDTree|endif
    " }
    " Syntastic {
        let g:syntastic_enable_signs = 1
        let g:syntastic_error_symbol='✗'
        let g:syntastic_warning_symbol='►'
        "打开文件时自动进行检查
        let g:syntastic_check_on_open=1
        let g:syntastic_enable_highlighting=1
        "进行实时检查，如果觉得卡顿，将下面的选项置为1
        let g:syntastic_check_on_wq = 0
        " 使用flake8,速度比pylint(详细)快
        let g:syntastic_python_checkers=['flake8']
        let g:flake8_ignore="E501,W293"
        let g:syntastic_javascript_checkers = ['jsl', 'jshint']
        let g:syntastic_html_checkers=['tidy', 'jshint']
        " 修改高亮的背景色, 适应主题
        highlight SyntasticErrorSign guifg=white guibg=black
        " to see error location list
        "总是打开Location List（相当于QuickFix）窗口，如果你发现syntastic因为与其他插件冲突而经常崩溃，将下面选项置0
        let g:syntastic_always_populate_loc_list = 1
        "自动打开Locaton List，默认值为2，表示发现错误时不自动打开，当修正以后没有再发现错误时自动关闭，置1表示自动打开自动关闭，0表示关闭自动打开和自动关闭，3表示自动打开，但不自动关闭
        let g:syntastic_auto_loc_list = 1
        "自动跳转到发现的第一个错误或警告处
        let g:syntastic_auto_jump = 1
        let g:syntastic_loc_list_height = 5
        function! ToggleErrors()
            let old_last_winnr = winnr('$')
            lclose
            if old_last_winnr == winnr('$')
                " Nothing was closed, open syntastic error location panel
                Errors
            endif
        endfunction
        nnoremap <Leader>s :call ToggleErrors()<cr>
        nnoremap <Leader>sn :lnext<cr>
        nnoremap <Leader>sp :lprevious<cr>
    " }
    " Nerdcommenter: {
        map <F4> <leader>ci <CR>
        " 注释的时候自动加个空格, 强迫症必配
        let g:NERDSpaceDelims=1
    " }
    " neocomplete: {
        let g:neocomplcache_force_overwrite_completefunc = 1
        " let g:NeoComplCache_DisableAutoComplete = 1 " 不自动弹出补全列表
    " }
" }

" Fugitive/Airline/Snippets


" AutoClose
" Ask.vim
" Tabularize
" Tagbar
" EasyMotion
" Tabular: 假如我想让其中的两行按等号对齐，则将光标定位到有等号的那行，执行 :Tab /= 即可
" Ctrl: 在vim normal模式下，按下ctrl+p
" *********************************************
" Surround: 需要为已一些存在的代码加上括号，删除一对括号但保留其中的内容
" :help surround
" *********************************************
